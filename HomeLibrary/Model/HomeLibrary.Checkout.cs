//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 19.05.2023 10:44:19
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace HomeLibrary
{

    /// <summary>
    /// There are no comments for HomeLibrary.Checkout in the schema.
    /// </summary>
    [Table(Name = @"home_library.Checkouts")]
    public partial class Checkout : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CheckoutID;

        private int _PersonID;

        private int _BookID;
        #pragma warning restore 0649

        private EntityRef<Book> _Book;

        private EntityRef<Person> _Person;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCheckoutIDChanging(int value);
        partial void OnCheckoutIDChanged();
        partial void OnPersonIDChanging(int value);
        partial void OnPersonIDChanged();
        partial void OnBookIDChanging(int value);
        partial void OnBookIDChanged();
        #endregion

        public Checkout()
        {
            this._Book  = default(EntityRef<Book>);
            this._Person  = default(EntityRef<Person>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CheckoutID in the schema.
        /// </summary>
        [Column(Storage = "_CheckoutID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CheckoutID
        {
            get
            {
                return this._CheckoutID;
            }
        }

    
        /// <summary>
        /// There are no comments for PersonID in the schema.
        /// </summary>
        [Column(Storage = "_PersonID", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PersonID
        {
            get
            {
                return this._PersonID;
            }
            set
            {
                if (this._PersonID != value)
                {
                    if (this._Person.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPersonIDChanging(value);
                    this.SendPropertyChanging("PersonID");
                    this._PersonID = value;
                    this.SendPropertyChanged("PersonID");
                    this.OnPersonIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BookID in the schema.
        /// </summary>
        [Column(Storage = "_BookID", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int BookID
        {
            get
            {
                return this._BookID;
            }
            set
            {
                if (this._BookID != value)
                {
                    if (this._Book.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBookIDChanging(value);
                    this.SendPropertyChanging("BookID");
                    this._BookID = value;
                    this.SendPropertyChanged("BookID");
                    this.OnBookIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Book in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Book_Checkout", Storage="_Book", ThisKey="BookID", OtherKey="BookID", IsForeignKey=true, DeleteOnNull=true)]
        public virtual Book Book
        {
            get
            {
                return this._Book.Entity;
            }
            set
            {
                Book previousValue = this._Book.Entity;
                if ((previousValue != value) || (this._Book.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Book");
                    if (previousValue != null)
                    {
                        this._Book.Entity = null;
                        previousValue.Checkout = null;
                    }
                    this._Book.Entity = value;
                    if (value != null)
                    {
                        this._BookID = value.BookID;
                        value.Checkout = this;
                    }
                    else
                    {
                        this._BookID = default(int);
                    }
                    this.SendPropertyChanged("Book");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Person in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Person_Checkout", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true, DeleteOnNull=true)]
        public virtual Person Person
        {
            get
            {
                return this._Person.Entity;
            }
            set
            {
                Person previousValue = this._Person.Entity;
                if ((previousValue != value) || (this._Person.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Person");
                    if (previousValue != null)
                    {
                        this._Person.Entity = null;
                        previousValue.Checkout.Remove(this);
                    }
                    this._Person.Entity = value;
                    if (value != null)
                    {
                        this._PersonID = value.PersonID;
                        value.Checkout.Add(this);
                    }
                    else
                    {
                        this._PersonID = default(int);
                    }
                    this.SendPropertyChanged("Person");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
