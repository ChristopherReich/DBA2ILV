//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 19.05.2023 10:44:19
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace HomeLibrary
{

    /// <summary>
    /// There are no comments for HomeLibrary.Person in the schema.
    /// </summary>
    [Table(Name = @"home_library.People")]
    public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PersonID;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<Checkout> _Checkout;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPersonIDChanging(int value);
        partial void OnPersonIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Person()
        {
            this._Checkout = new EntitySet<Checkout>(new Action<Checkout>(this.attach_Checkout), new Action<Checkout>(this.detach_Checkout));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PersonID in the schema.
        /// </summary>
        [Column(Storage = "_PersonID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PersonID
        {
            get
            {
                return this._PersonID;
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Checkout in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Person_Checkout", Storage="_Checkout", ThisKey="PersonID", OtherKey="PersonID")]
        public virtual EntitySet<Checkout> Checkout
        {
            get
            {
                return this._Checkout;
            }
            set
            {
                this._Checkout.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Checkout(Checkout entity)
        {
            this.SendPropertyChanging("Checkout");
            entity.Person = this;
        }
    
        private void detach_Checkout(Checkout entity)
        {
            this.SendPropertyChanging("Checkout");
            entity.Person = null;
        }
    }

}
