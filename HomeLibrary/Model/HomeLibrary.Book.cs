//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 19.05.2023 10:44:19
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace HomeLibrary
{

    /// <summary>
    /// There are no comments for HomeLibrary.Book in the schema.
    /// </summary>
    [Table(Name = @"home_library.Books")]
    public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BookID;

        private string _Title;

        private int? _GenreID;

        private int? _AuthorID;

        private int? _PublisherID;

        private string _ISBN;

        private ushort? _PublicationYear;

        private ushort? _Pages;
        #pragma warning restore 0649

        private EntityRef<Author> _Author;

        private EntityRef<Publisher> _Publisher;

        private EntityRef<Checkout> _Checkout;

        private EntityRef<Genre> _Genre;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBookIDChanging(int value);
        partial void OnBookIDChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnGenreIDChanging(int? value);
        partial void OnGenreIDChanged();
        partial void OnAuthorIDChanging(int? value);
        partial void OnAuthorIDChanged();
        partial void OnPublisherIDChanging(int? value);
        partial void OnPublisherIDChanged();
        partial void OnISBNChanging(string value);
        partial void OnISBNChanged();
        partial void OnPublicationYearChanging(ushort? value);
        partial void OnPublicationYearChanged();
        partial void OnPagesChanging(ushort? value);
        partial void OnPagesChanged();
        #endregion

        public Book()
        {
            this._Author  = default(EntityRef<Author>);
            this._Publisher  = default(EntityRef<Publisher>);
            this._Checkout  = default(EntityRef<Checkout>);
            this._Genre  = default(EntityRef<Genre>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BookID in the schema.
        /// </summary>
        [Column(Storage = "_BookID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(9) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BookID
        {
            get
            {
                return this._BookID;
            }
            set
            {
                if (this._BookID != value)
                {
                    if (this._Checkout.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBookIDChanging(value);
                    this.SendPropertyChanging("BookID");
                    this._BookID = value;
                    this.SendPropertyChanged("BookID");
                    this.OnBookIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging("Title");
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GenreID in the schema.
        /// </summary>
        [Column(Storage = "_GenreID", DbType = "int(9) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? GenreID
        {
            get
            {
                return this._GenreID;
            }
            set
            {
                if (this._GenreID != value)
                {
                    if (this._Genre.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGenreIDChanging(value);
                    this.SendPropertyChanging("GenreID");
                    this._GenreID = value;
                    this.SendPropertyChanged("GenreID");
                    this.OnGenreIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AuthorID in the schema.
        /// </summary>
        [Column(Storage = "_AuthorID", DbType = "int(9) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? AuthorID
        {
            get
            {
                return this._AuthorID;
            }
            set
            {
                if (this._AuthorID != value)
                {
                    if (this._Author.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAuthorIDChanging(value);
                    this.SendPropertyChanging("AuthorID");
                    this._AuthorID = value;
                    this.SendPropertyChanged("AuthorID");
                    this.OnAuthorIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublisherID in the schema.
        /// </summary>
        [Column(Storage = "_PublisherID", DbType = "int(9) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? PublisherID
        {
            get
            {
                return this._PublisherID;
            }
            set
            {
                if (this._PublisherID != value)
                {
                    if (this._Publisher.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPublisherIDChanging(value);
                    this.SendPropertyChanging("PublisherID");
                    this._PublisherID = value;
                    this.SendPropertyChanged("PublisherID");
                    this.OnPublisherIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ISBN in the schema.
        /// </summary>
        [Column(Storage = "_ISBN", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string ISBN
        {
            get
            {
                return this._ISBN;
            }
            set
            {
                if (this._ISBN != value)
                {
                    this.OnISBNChanging(value);
                    this.SendPropertyChanging("ISBN");
                    this._ISBN = value;
                    this.SendPropertyChanged("ISBN");
                    this.OnISBNChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublicationYear in the schema.
        /// </summary>
        [Column(Storage = "_PublicationYear", DbType = "smallint(5) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public ushort? PublicationYear
        {
            get
            {
                return this._PublicationYear;
            }
            set
            {
                if (this._PublicationYear != value)
                {
                    this.OnPublicationYearChanging(value);
                    this.SendPropertyChanging("PublicationYear");
                    this._PublicationYear = value;
                    this.SendPropertyChanged("PublicationYear");
                    this.OnPublicationYearChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pages in the schema.
        /// </summary>
        [Column(Storage = "_Pages", DbType = "smallint(5) UNSIGNED NULL", UpdateCheck = UpdateCheck.Never)]
        public ushort? Pages
        {
            get
            {
                return this._Pages;
            }
            set
            {
                if (this._Pages != value)
                {
                    this.OnPagesChanging(value);
                    this.SendPropertyChanging("Pages");
                    this._Pages = value;
                    this.SendPropertyChanged("Pages");
                    this.OnPagesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Author in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Author_Book", Storage="_Author", ThisKey="AuthorID", OtherKey="AuthorID", IsForeignKey=true)]
        public virtual Author Author
        {
            get
            {
                return this._Author.Entity;
            }
            set
            {
                Author previousValue = this._Author.Entity;
                if ((previousValue != value) || (this._Author.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Author");
                    if (previousValue != null)
                    {
                        this._Author.Entity = null;
                        previousValue.Books.Remove(this);
                    }
                    this._Author.Entity = value;
                    if (value != null)
                    {
                        this._AuthorID = value.AuthorID;
                        value.Books.Add(this);
                    }
                    else
                    {
                        this._AuthorID = default(int?);
                    }
                    this.SendPropertyChanged("Author");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Publisher in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Publisher_Book", Storage="_Publisher", ThisKey="PublisherID", OtherKey="PublisherID", IsForeignKey=true)]
        public virtual Publisher Publisher
        {
            get
            {
                return this._Publisher.Entity;
            }
            set
            {
                Publisher previousValue = this._Publisher.Entity;
                if ((previousValue != value) || (this._Publisher.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Publisher");
                    if (previousValue != null)
                    {
                        this._Publisher.Entity = null;
                        previousValue.Books.Remove(this);
                    }
                    this._Publisher.Entity = value;
                    if (value != null)
                    {
                        this._PublisherID = value.PublisherID;
                        value.Books.Add(this);
                    }
                    else
                    {
                        this._PublisherID = default(int?);
                    }
                    this.SendPropertyChanged("Publisher");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Checkout in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Book_Checkout", Storage="_Checkout", ThisKey="BookID", OtherKey="BookID", IsUnique=true, IsForeignKey=false)]
        public virtual Checkout Checkout
        {
            get
            {
                return this._Checkout.Entity;
            }
            set
            {
                Checkout previousValue = this._Checkout.Entity;
                if ((previousValue != value) || (this._Checkout.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Checkout");
                    if (previousValue != null)
                    {
                        this._Checkout.Entity = null;
                        previousValue.Book = null;
                    }
                    this._Checkout.Entity = value;
                    if (value != null)
                    {
                        value.Book = this;
                    }
                    this.SendPropertyChanged("Checkout");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Genre in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Genre_Book", Storage="_Genre", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true)]
        public Genre Genre
        {
            get
            {
                return this._Genre.Entity;
            }
            set
            {
                Genre previousValue = this._Genre.Entity;
                if ((previousValue != value) || (this._Genre.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Genre");
                    if (previousValue != null)
                    {
                        this._Genre.Entity = null;
                        previousValue.Books.Remove(this);
                    }
                    this._Genre.Entity = value;
                    if (value != null)
                    {
                        this._GenreID = value.GenreID;
                        value.Books.Add(this);
                    }
                    else
                    {
                        this._GenreID = default(int?);
                    }
                    this.SendPropertyChanged("Genre");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
